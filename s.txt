    dbg!(&re);
if re.path.starts_with("/echo/") {
let str = &re.path[6..];
dbg!(&str);
let m = plain_text(str);
_stream.write(m.as_bytes()).unwrap();
}
else if re.path.starts_with("/files/") {
if re.method == "GET" {
let str = &re.path[7..];
let mut file = File::open(format!("{}/{}", directory.clone(), str));
if let Ok(mut fe) = file {
let mut contents = String::new();
fe.read_to_string(&mut contents).expect("TODO: panic message");
let resp = format!(
"HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: {}\r\n\r\n{}",
contents.len(),
contents
);
_stream.write(resp.as_bytes()).expect("");
}   else {
_stream.write(not_found()).expect("TODO: panic message");
}


} else if re.method == "POST" {
dbg!("azdadz");
let str = &re.path[7..];
let mut file = File::create(format!("{}/{}", directory.clone(), str)).unwrap();
file.write_all(re.body.as_ref()).expect("TODO: panic message");
_stream.write(b"HTTP/1.1 201 OK\r\n\r\n").expect("TODO: panic message");

}
}
else {
match re.path.as_str() {
"/" => {
_stream.write(b"HTTP/1.1 200 OK\r\n\r\n").expect("TODO: panic message");

}
"/user-agent" => {
_stream.write(plain_text(re.headers.get("User-Agent:").unwrap()).as_bytes()).expect("TODO: panic message");
}
_ => {
_stream.write(not_found()).expect("TODO: panic message");
}
